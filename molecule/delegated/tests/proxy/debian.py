import pytest

from ..util.util import get_ansible, get_variable

testinfra_runner, testinfra_hosts = get_ansible()


def check_ansible_os_family(host):
    if get_variable(host, "ansible_os_family", True) != "Debian":
        pytest.skip("ansible_os_family mismatch")


def test_proxy_apt_configuration(host):
    """Check if the proxy configuration for apt is correctly set on Debian-based systems."""
    check_ansible_os_family(host)

    proxy_proxies = get_variable(host, "proxy_proxies")
    proxy_package_manager = get_variable(host, "proxy_package_manager")

    if len(proxy_proxies) == 0:
        pytest.skip("proxy_proxies is empty")

    if not proxy_package_manager:
        pytest.skip("proxy_package_manager is not true")

    proxy_apt_conf_path = get_variable(host, "proxy_apt_conf_path")
    proxy_file = host.file(proxy_apt_conf_path)

    assert proxy_file.exists
    assert proxy_file.user == "root"
    assert proxy_file.group == "root"
    assert proxy_file.mode == 0o644

    assert "DO NOT EDIT THIS FILE BY HAND" in proxy_file.content_string

    # Check if the proxy configuration in the file matches the expected values
    if "http" in proxy_proxies:
        assert (
            f"Acquire::http::proxy \"{proxy_proxies['http']}\";"
            in proxy_file.content_string
        )
    if "https" in proxy_proxies:
        assert (
            f"Acquire::https::proxy \"{proxy_proxies['https']}\";"
            in proxy_file.content_string
        )
    if "ftp" in proxy_proxies:
        assert (
            f"Acquire::ftp::proxy \"{proxy_proxies['ftp']}\";"
            in proxy_file.content_string
        )
