---
- name: Get and set remote SSH authorized keys
  when: item.key.startswith('https') or item.key == "github"
  block:  # noqa: osism-fqcn
    - name: Fetch SSH authorized key
      ansible.builtin.uri:
        url: "{{ item.key }}"
        return_content: true
      register: result1
      failed_when: "'ssh' not in result1.content"
      when: item.key.startswith('https')

    - name: Fetch SSH authorized key from GitHub
      ansible.builtin.uri:
        url: "https://github.com/{{ item.name }}.keys"
        return_content: true
      register: result2
      failed_when: "'ssh' not in result2.content"
      when: item.key == "github"

    - name: Set user_keys fact when keys are not from GitHub
      ansible.builtin.set_fact:
        user_keys: "{{ result1.content.split('\n') }}"
      when:
        - result2 is skipped
        - result1.content is defined

    - name: Set user_keys fact when keys are from GitHub
      ansible.builtin.set_fact:
        user_keys: "{{ result2.content.split('\n') }}"
      when:
        - result1 is skipped
        - result2.content is defined

    - name: Set SSH authorized key
      become: true
      ansible.posix.authorized_key:
        user: "{{ item.name }}"
        key: "{{ sshkey }}"
      when:
        - user_type == 'default'
        - sshkey.startswith('ssh')
      loop: "{{ user_keys }}"
      loop_control:
        loop_var: sshkey
        label: "{{ item.name }}"

    - name: Write SSH authorized key into keyfile
      ansible.builtin.lineinfile:
        path: "{{ user_keyfile }}"
        line: "{{ sshkey }} {{ item.name }}"
      when:
        - user_type == 'keyfile'
        - sshkey.startswith('ssh')
      loop: "{{ user_keys }}"
      loop_control:
        loop_var: sshkey
        label: "{{ item.name }}"
