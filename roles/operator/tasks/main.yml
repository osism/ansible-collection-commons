---
- name: Gather variables for each operating system
  ansible.builtin.include_vars: "{{ ansible_os_family }}.yml"

- name: Create operator group
  become: true
  ansible.builtin.group:
    name: "{{ operator_group }}"
    gid: "{{ operator_group_id }}"

- name: Create operator user
  become: true
  ansible.builtin.user:
    name: "{{ operator_user }}"
    comment: OSISM operator user
    shell: "{{ operator_shell }}"
    uid: "{{ operator_user_id }}"
    group: "{{ operator_group }}"
  register: result_create_operator_user

- name: Add operator user to additional groups
  become: true
  ansible.builtin.user:
    name: "{{ operator_user }}"
    groups: "{{ item }}"
    append: true
  loop: "{{ operator_groups }}"

- name: Copy operator user sudoers file
  become: true
  ansible.builtin.template:
    src: operator-sudoers.j2
    dest: "/etc/sudoers.d/{{ operator_user }}-sudoers"
    owner: root
    group: root
    mode: 0440
    validate: /usr/sbin/visudo -cf %s

- name: Set language variables in .bashrc configuration file
  become: true
  ansible.builtin.lineinfile:
    dest: "{{ result_create_operator_user.home }}/.bashrc"
    line: "{{ item }}"
    create: true
    mode: 0640
  loop:
    - "export LANGUAGE=C.UTF-8"
    - "export LANG=C.UTF-8"
    - "export LC_ALL=C.UTF-8"

- name: Create .ssh directory
  become: true
  ansible.builtin.file:
    path: "{{ result_create_operator_user.home }}/.ssh"
    owner: "{{ operator_user }}"
    group: "{{ operator_group }}"
    state: directory
    mode: 0700

- name: Set ssh authorized keys
  become: true
  ansible.posix.authorized_key:
    key: "{{ item }}"
    user: "{{ operator_user }}"
  loop: "{{ operator_authorized_keys }}"
  no_log: true

- name: Set authorized github accounts
  become: true
  ansible.posix.authorized_key:
    key: "{{ lookup('url', 'https://github.com/' + item + '.keys', split_lines=False) }}"
    user: "{{ operator_user }}"
  loop: "{{ operator_authorized_github_accounts }}"

- name: Set password of operator user
  become: true
  ansible.builtin.user:
    name: "{{ operator_user }}"
    update_password: always
    password: "{{ operator_password }}"
  when: operator_password is defined and operator_password
  no_log: true
