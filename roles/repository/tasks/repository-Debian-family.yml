---
- name: Copy 99osism apt configuration
  become: true
  ansible.builtin.template:
    src: 99osism.j2
    dest: /etc/apt/apt.conf.d/99osism
    mode: 0644

- name: Add repository keys via URLs with apt-key
  become: true
  ansible.builtin.apt_key:
    url: "{{ item }}"
    state: present
  loop: "{{ repository_keys }}"
  when: ansible_distribution_version is version('22.04', '<')

- name: Add repository keys via URLs
  become: true
  ansible.builtin.get_url:
    url: "{{ item }}"
    dest: "/etc/apt/trusted.gpg.d/repository-{{ ansible_loop.index }}.asc"
    mode: 0644
    owner: root
    group: root
  loop: "{{ repository_keys }}"
  loop_control:
    extended: true
  when: ansible_distribution_version is version('22.04', '>=')

- name: Add repository keys via keyservers with apt-key
  become: true
  ansible.builtin.apt_key:
    id: "{{ item.key }}"
    keyserver: "{{ item.value }}"
    state: present
  loop: "{{ repository_key_ids | dict2items }}"
  when: ansible_distribution_version is version('22.04', '<')

- name: Add repository keys via keyservers
  ansible.builtin.fail:
    msg: |
      Adding repository keys via a keyserver is currently not supported
      on Ubuntu 22.04. Please store the corresponding keys in the configuration
      repository as files and set the repository_key_files_directory parameter
      (e.g. /opt/configuration/files/repository_keys).
  when:
    - ansible_distribution_version is version('22.04', '>=')
    - repository_key_ids

# NOTE: We ignore errors that can occur during the seeding of the
#       environment in constellations where the repository keys are
#       still missing.
- name: Check if the keys directory exists
  ansible.builtin.stat:
    path: "{{ repository_key_files_directory }}"
  register: result
  delegate_to: "{{ groups['manager'][0] }}"
  ignore_errors: true
  run_once: true
  when: "'manager' in groups"

- name: Add repository keys via files with apt-key
  become: true
  ansible.builtin.apt_key:
    data: "{{ lookup('file', item) }}"
    state: present
  with_fileglob: "{{ repository_key_files_directory }}/*.gpg"
  when:
    - result is defined and result.stat.isdir is defined and result.stat.isdir
    - ansible_distribution_version is version('22.04', '<')

- name: Add repository keys via files
  become: true
  ansible.builtin.copy:
    content: "{{ lookup('file', item) }}"
    dest: "/etc/apt/trusted.gpg.d/{{ ansible_loop.index }}.asc"
    mode: 0644
    owner: root
    group: root
  with_fileglob: "{{ repository_key_files_directory }}/*.gpg"
  loop_control:
    extended: true
  when:
    - result is defined and result.stat.isdir is defined and result.stat.isdir
    - ansible_distribution_version is version('22.04', '>=')

# NOTE: Not using apt_repository here because it requires python-apt.

- name: Copy source.list file
  become: true
  ansible.builtin.template:
    src: source.list.j2
    dest: /etc/apt/sources.list
    owner: root
    group: root
    mode: 0644
    backup: true
  notify: Force update of package cache

- name: Update package cache
  become: true
  ansible.builtin.apt:
    cache_valid_time: "{{ repository_cache_valid_time }}"
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"
