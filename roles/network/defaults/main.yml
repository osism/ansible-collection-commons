---
# possible values: [interfaces, netplan]
network_type: netplan


# Flag whether all network devices are controlled by this role
#
# If true, all additional configurations are deleted
network_manage_devices: true

# Allow the network to restart
#
# This is only triggered, when the all interface file was changed
network_allow_service_restart: false

# How should changed interfaces be treated?
#
# Options:
#   service - restart the network service for the interface
#   interface - down & up the interface
#   nothing - do nothing
#   * - undefined behavior
network_restart_method: nothing

# configuration for type interfaces

# List of all network interface configurations
#
# For ipv6 you want to add an additional inet6 entry
network_interfaces:
  - device: eth0
    # auto & allow are only used for the first device entry
    auto: true  # enable on boot (default)
    allow: []  # array of allow-[stanzas] eg. allow-hotplug

    family: inet  # network type eg. inet | inet6 (default)
    method: dhcp  # dhcp | static (default)
    # examples for method 'static'
    # description: 'a user description'
    # address: 192.168.1.11
    # network: 192.168.1.0
    # netmask: 193.168.1.255
    # broadcast: 192.168.1.255
    # gateway: 192.168.1.1

    # transport
    # mtu: 9000 # give a non-default mtu

    # ifmetric
    # metric: 10

    # optional dns settings
    # nameservers: ['9.9.9.9']
    # dns_search: "domain.net" # appended dns search string

    # optional additional subnets/ips
    # subnets: ['192.168.123.0/24', '192.168.124.11/32']

    bridge: {}  # optional bridge parameters
    #  ports:
    #  stp:
    #  fd:
    #  maxwait:
    #  waitport:

    bond: {}  # optional bonding parameters
    #  mode:
    #  miimon:
    #  master:
    #  slaves:
    #  lacp-rate:

    # optional vlan settings
    vlan: {}
    #  raw-device: 'eth0'

    # inline hook scripts
    pre-up: []  # pre-up script lines
    up: []  # up script lines
    post-up: []  # post-up script lines (alias for up)
    pre-down: []  # pre-down script lines (alias for down)
    down: []  # down script lines
    post-down: []  # post-down script lines

network_interfaces_path: "/etc/network/interfaces"
network_interface_path: "/etc/network/interfaces.d"
network_interface_permissions: 0644

network_interface_restart_commands:
  interface: "ifdown {{ item.item.0 }}; ifup {{ item.item.0 }}"

network_interface_required_packages:
  - bridge-utils
  - ifenslave
  - ifmetric
  - ifupdown
  - vlan

# configuration for type netplan

network_netplan_required_packages:
  - netplan.io
network_netplan_path: "/etc/netplan"
network_netplan_file: "01-osism.yaml"
network_netplan_permissions: 0600

network_netplan_remove_unmanaged_files: true
network_netplan_managed_files_defaults:
  - "{{ network_netplan_file }}"
network_netplan_managed_files_extra: []
network_netplan_managed_files: "{{ network_netplan_managed_files_defaults + network_netplan_managed_files_extra }}"

network_version: 2
network_renderer: networkd

network_bonds: {}
network_bridges: {}
network_ethernets: {}
network_tunnels: {}
network_vlans: {}

network_dispatcher_package_name: networkd-dispatcher
network_dispatcher_service_name: networkd-dispatcher
network_dispatcher_scripts: []

# network_dispatcher_scripts:
#   - src: /opt/configuration/network/vxlan.sh
#     dest: routable.d/vxlan.sh
#   - src: /opt/configuration/network/iptables.sh
#     dest: routable.d/iptables.sh

# dummy

## network_dummy_interfaces:
##   - lo-bgp
##   - lo-vxlan
network_dummy_interfaces: []
network_dummy_interface_mtu: 9000
