---
- name: Install required packages
  become: true
  ansible.builtin.apt:
    name: "{{ network_netplan_required_packages }}"
    state: present
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"

- name: Remove ifupdown package
  become: true
  ansible.builtin.apt:
    name: ifupdown
    state: absent
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"

- name: Create required directories
  become: true
  ansible.builtin.file:
    path: "{{ item }}"
    state: directory
    mode: 0755
    owner: root
    group: root
  with_items:
    - "{{ network_netplan_path }}"

# NOTE: The use of the local actions are a workaround to allow
#       the use of variables as keys in the dictionaries.

- name: Prepare netplan configuration template
  ansible.builtin.template:
    src: netplan/01-osism.yaml.j2
    dest: "/tmp/{{ inventory_hostname }}-01-osism.yaml.j2"
    mode: 0644
  delegate_to: localhost
  # NOTE: This task does not change anything on the target host and always
  #       changes. Regardless of whether changes really take place. Therefore
  #       changed_when is set to False here.
  changed_when: false

- name: Copy netplan configuration
  become: true
  ansible.builtin.template:
    src: "/tmp/{{ inventory_hostname }}-01-osism.yaml.j2"
    dest: "{{ network_netplan_path }}/{{ network_netplan_file }}"
    mode: 0600
    owner: root
    group: root
  notify:
    - Netplan configuration changed

- name: Remove netplan configuration template
  ansible.builtin.file:
    path: "/tmp/{{ inventory_hostname }}-01-osism.yaml.j2"
    state: absent
  delegate_to: localhost
  # NOTE: This task does not change anything on the target host and always
  #       changes. Regardless of whether changes really take place. Therefore
  #       changed_when is set to False here.
  changed_when: false

- name: Copy interfaces file
  become: true
  ansible.builtin.template:
    src: netplan/interfaces.j2
    dest: "{{ network_interfaces_path }}"
    mode: 0644
    owner: root
    group: root

- name: Copy dispatcher scripts
  become: true
  ansible.builtin.template:
    src: "{{ item.src }}"
    dest: "/etc/networkd-dispatcher/{{ item.dest }}"
    mode: 0755
    owner: root
    group: root
  loop: "{{ network_dispatcher_scripts }}"

- name: "Install package {{ network_dispatcher_package_name }}"
  become: true
  ansible.builtin.apt:
    name: "{{ network_dispatcher_package_name }}"
    state: present
    lock_timeout: "{{ apt_lock_timeout | default(300) }}"

- name: "Enable service {{ network_dispatcher_service_name }}"
  become: true
  ansible.builtin.service:
    name: "{{ network_dispatcher_service_name }}"
    enabled: true
    state: started

- name: Include cleanup tasks
  ansible.builtin.include_tasks: cleanup-netplan.yml
  when:
    - network_netplan_remove_unmanaged_files | bool
